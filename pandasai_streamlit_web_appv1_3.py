# -*- coding: utf-8 -*-
"""PandasAI Streamlit web appv1.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IfRbhEwqEj6oN3g-y3fbBNl_Gfj4IsRI
"""



"""## PandasAi Streamlit Web App - Generative AI meets Pandas."""

import os
import streamlit as st
import pandas as pd
from pandasai import SmartDataframe
from pandasai.agent.agent import Agent
from pandasai.ee.agents.semantic_agent import SemanticAgent
import plotly.express as px

# Streamlit App Setup
st.title("Interactive EDA with PandasAI")
st.write("Upload a dataset and interact with it through natural language queries.")

# API Key Input
api_key = st.sidebar.text_input("Enter your PandasAI API Key", type="password")
if not api_key:
    st.warning("Please enter an API key to proceed.")
else:
    os.environ['PANDASAI_API_KEY'] = api_key

# Dataset Upload
uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("Dataset preview:", df.head())

    # Convert the DataFrame to SmartDataframe for PandasAI
    sdf = SmartDataframe(df)

    # Session state for storing queries and responses
    if "query_history" not in st.session_state:
        st.session_state.query_history = []

    # Query Input
    query = st.text_input("Ask your dataset a question:")

    if query:
        # Use SemanticAgent for better understanding of natural queries
        agent = SemanticAgent(sdf)
        answer = agent.chat(query)

        # Save query and response in session state
        st.session_state.query_history.append((query, answer))

        # Display the answer
        st.write("Answer:", answer)

        # Optional Code Display
        if st.checkbox("Show Generated Code"):
            st.code(agent.last_code_generated)

        # Display Query History
        st.write("### Previous Queries and Responses")
        for idx, (q, a) in enumerate(st.session_state.query_history):
            st.write(f"**Query {idx + 1}:** {q}")
            st.write(f"**Answer {idx + 1}:** {a}")

        # Sample Visualization for Specific Queries (e.g., fatalities)
        if "fatalities" in query.lower():
            fig = px.histogram(df, x="fatalities")  # Replace with relevant columns
            st.plotly_chart(fig)

    # Report Download Button
    if st.button("Download Report"):
        with open("report.md", "w") as file:
            file.write("# Query Report\n")
            for idx, (q, a) in enumerate(st.session_state.query_history):
                file.write(f"### Query {idx + 1}\n")
                file.write(f"{q}\n\n")
                file.write(f"**Answer:** {a}\n\n")
                file.write(f"**Generated Code:**\n```\n{agent.last_code_generated}\n```\n")
        st.write("Report saved as 'report.md'.")

# Dataset Reset Button
if st.button("Switch Dataset"):
    st.session_state.query_history = []  # Reset session history
    st.write("Dataset has been reset. Please upload a new one.")

